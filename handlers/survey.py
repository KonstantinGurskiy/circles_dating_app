from aiogram import Router, F, Bot
from aiogram.types import Message, location, ReplyKeyboardMarkup, KeyboardButton, user, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.methods.send_video_note import SendVideoNote
from aiogram.methods.delete_message import DeleteMessage

from datetime import datetime
from asyncio import sleep, create_task

from keyboards.builders import form_btn, form_loc_req

from data.database import DataBase
from utils.states import Form
from utils.city import check
from utils.coord2loco import get_place
from keyboards.inline import name_btn, target_btn, look_for_btn, gender_btn, searching_start_btn, check_profile_btn, like_btn
from utils.search_machine import closest_person
from utils.check_timer import check_timer
from utils.clean_chat import insert_new_msgs_to_db, delete_msgs
import geopy.distance

router = Router()
msgs = []

@router.callback_query(lambda c: (c.data == 'create') | (c.data == 'edit'))
async def my_form(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.answer_callback_query(callback.id)
    msgs.append(await callback.message.answer("–°–æ–∑–¥–∞—é –∞–Ω–∫–µ—Ç—É..."))
    # await msgs[0].delete()
    await state.update_data(user_id = str(callback.from_user.id))
    await state.update_data(liked = None)
    await state.update_data(likes = None)
    await state.update_data(already_saw = None)
    await state.update_data(already_seen_by = None)
    await state.update_data(waiting = False)
    await state.update_data(active = True)
    await state.update_data(time = datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    await state.set_state(Form.name)
    msgs.append(await callback.message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
                        reply_markup=name_btn([callback.from_user.first_name, "–ù–æ–≤–æ–µ –∏–º—è"])))


@router.callback_query(lambda c: c.data == 'name')
async def form_name(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.answer_callback_query(callback.id)
    await state.update_data(name=callback.from_user.first_name)
    await state.set_state(Form.longitude)
    msgs.append(await callback.message.answer(
                """–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç –ø–æ–¥–æ–±—Ä–∞–ª –±–ª–∏–∂–∞–π—à–∏—Ö –∫ –≤–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.
–≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞.
–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–∏–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –≤—ã.
–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚¨á‚¨á‚¨áÔ∏èÔ∏è""",
                reply_markup=form_loc_req(["üìç–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—éüìç"])
    ))

@router.callback_query(lambda c: c.data == 'other')
async def form_name(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.answer_callback_query(callback.id)
    msgs.append(await callback.message.answer("–í–≤–µ–¥–∏ –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"))
    @router.message(Form.name, F.text)
    async def form_longitude(message: Message, state: FSMContext):
        await state.update_data(name=message.text)
        await state.set_state(Form.longitude)

        msgs.append(await callback.message.answer(
                """–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç –ø–æ–¥–æ–±—Ä–∞–ª –±–ª–∏–∂–∞–π—à–∏—Ö –∫ –≤–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.
–≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞.
–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–∏–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –≤—ã.
–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚¨á‚¨á‚¨áÔ∏èÔ∏è""",
                reply_markup=form_loc_req(["üìç–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—éüìç"])
    ))
    @router.message(Form.longitude, ~F.location)
    async def form_photo(message: Message, state: FSMContext):
        msgs.append(await message.answer("–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é!"))



@router.message(Form.longitude, F.location)
async def form_longitude(message: Message, state: FSMContext):
    lat = message.location.latitude
    lon = message.location.longitude
    await state.update_data(latitude=lat)
    await state.update_data(longitude=lon)

    msg = await message.answer("–ó–∞–ø–∏—Å—ã–≤–∞—é...", reply_markup=ReplyKeyboardRemove())
    try:
        await msg.delete()
    except:
        print("!!!")


    await state.set_state(Form.target)
    msgs.append(await message.answer(
            "–ó–∞—á–µ–º —Ç—ã –∑–¥–µ—Å—å?\n–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º—É-–Ω–∏–±—É–¥—å?",
            reply_markup=target_btn(["–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ", "–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–±—ã—Ç–∏—é"])
    ))


@router.message(Form.longitude, ~F.location)
async def form_photo(message: Message, state: FSMContext):
    msgs.append(await message.answer("–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é!"))


@router.callback_query(lambda c: (c.data == '—Å–æ–∑–¥–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è') | (c.data == '–≥–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è'))
async def form_target(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.answer_callback_query(callback.id)
    await state.update_data(target=callback.data)
    if(callback.data == "–≥–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è"):
        await state.set_state(Form.gender)
        msgs.append(await callback.message.answer("–¢—ã –ø–∞—Ä–µ–Ω—å –∏–ª–∏ –¥–µ–≤—É—à–∫–∞?", reply_markup=gender_btn(["–ø–∞—Ä–µ–Ω—å", "–¥–µ–≤—É—à–∫–∞"])))
    else:
        await state.set_state(Form.look_for)
        await state.update_data(gender = None)
        msgs.append(await callback.message.answer("–ö–æ–≥–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –≤–∏–¥–µ—Ç—å –Ω–∞ —Å–æ–±—ã—Ç–∏–∏?", reply_markup=look_for_btn(["–ø–∞—Ä–Ω–µ–π", "–¥–µ–≤—É—à–µ–∫", "–≤—Å–µ—Ö!"])))

#
# @router.message(Form.target, ~F.text.casefold().in_(["—Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", "–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–±—ã—Ç–∏—é"]))
# async def form_photo(message: Message, state: FSMContext):
#     await callback.message.answer("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç!")


@router.callback_query(lambda c: (c.data == '–ø–∞—Ä–µ–Ω—å') | (c.data == '–¥–µ–≤—É—à–∫–∞'))
async def form_target(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.answer_callback_query(callback.id)
    await state.update_data(gender=callback.data)
    await state.update_data(look_for = None)
    await state.set_state(Form.circle)
    msgs.append(await callback.message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∫—Ä—É–∂–∫–æ–º"))

# @router.callback_query(lambda c: ~((c.data == 'boy') | (c.data == 'girl')))
# async def form_target(callback: CallbackQuery, state: FSMContext):
#     await callback.message.answer("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç!")

@router.callback_query(lambda c: (c.data == '–ø–∞—Ä–Ω–µ–π') | (c.data == '–¥–µ–≤—É—à–µ–∫') | (c.data == '–≤—Å–µ—Ö!'))
async def form_target(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.answer_callback_query(callback.id)
    await state.update_data(look_for=callback.data)
    await state.set_state(Form.circle)
    msgs.append(await callback.message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∫—Ä—É–∂–∫–æ–º"))


@router.message(Form.circle, F.video_note)
async def form_photo(message: Message, state: FSMContext, db: DataBase, bot: Bot):
    if message.forward_from == None:
        print(message.forward_from)
        video_note_file_id = message.video_note.file_id
        await state.update_data(circle=video_note_file_id)
        await state.update_data(username = message.from_user.username)
        await state.update_data(msgs_to_delete = None)
        data = await state.get_data()
        await state.clear()

        frm_text = []
        [
            frm_text.append(value)
            for _, value in data.items()
        ]
        print(frm_text)
        await db.insert(frm_text)

        global msgs
        for msg in msgs:
            try:
                await msg.delete()
            except:
                print("!!!")

        msgs=[]

        if(data["gender"]==None):
            msgs.append(await message.answer("–¢–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:"))

            msgs.append(await message.answer_video_note(
                video_note_file_id,
            ))
            msgs.append(await message.answer("–ò–º—è: " + data["name"] + "\n–¢—ã -- " + data["target"] + "\n–ü—Ä–∏–≥–ª–∞—à–∞—é: " + data["look_for"] + "\n–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è: " + ','.join(str(await get_place("073e8a55524f48048a75d1ba0dc83bd6", data["latitude"], data["longitude"])).split(',')[-4:-1])))
            # await message.answer("–°–æ–±—ã—Ç–∏–µ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞\n–ú—ã –ø—Ä–∏—à–ª–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –µ–≥–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å")
            msgs.append(await message.answer("–°–æ–±—ã—Ç–∏–µ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞\n"))
            # await message.answer("–í—Å—ë –≤–µ—Ä–Ω–æ?\n", reply_markup=check_profile_btn(["–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å"]))
        else:
            msgs.append(await message.answer("–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:"))

            msgs.append(await message.answer_video_note(
                video_note_file_id,
            ))
            msgs.append(await message.answer("–ò–º—è: " + data["name"] + "\n–¢—ã -- " + data["target"] + "\n–¢—ã -- " + data["gender"] +"\n–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è: " + ','.join(str(await get_place("073e8a55524f48048a75d1ba0dc83bd6", data["latitude"], data["longitude"])).split(',')[-4:-1])))
            # await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞\n–ú—ã –ø—Ä–∏—à–ª–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –µ–≥–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å")
            msgs.append(await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞\n"))
            # await message.answer("–í—Å—ë –≤–µ—Ä–Ω–æ?\n", reply_markup=check_profile_btn(["–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å"]))

        if(data["username"]==None):
            msgs.append(await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ\n–î–æ–±–∞–≤—å –µ–≥–æ\n–ò–Ω–∞—á–µ -- —Ç–µ–±–µ –Ω–µ —Å–º–æ–≥—É—Ç –Ω–∞–ø–∏—Å–∞—Ç—å"))











    ###–û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏ –∂–¥—É—â–∏–º
        df = await db.read_table()
        if(data["gender"]==None):
            guests_list = df[(df['gender'].values!=None) & (df['waiting'].values==True) & (df['time'].apply(lambda x: check_timer(x))) & (df['active']==True)]
            if(data["look_for"]=="–ø–∞—Ä–Ω–µ–π"):
                guests_list &= guests_list['gender'].isin(['–ø–∞—Ä–µ–Ω—å'])
            elif(data["look_for"]=="–¥–µ–≤—É—à–µ–∫"):
                guests_list &= guests_list['gender'].isin(['–¥–µ–≤—É—à–∫–∞'])
            for item in guests_list['user_id'].values:
                changed_row = df[df['user_id'] == int(item)].iloc[0].values.flatten().tolist()[1:]
                changed_row[0] = str(changed_row[0])
                if changed_row[3]==None:
                    changed_row[3] = str(message.from_user.id)
                else:
                    changed_row[3] += ' ' + str(message.from_user.id)
                changed_row[5] = str(0)
                changed_row[6] = str(changed_row[6])
                await db.insert(changed_row)
                print(item)
                temp = []
                print("–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–±—ã—Ç–∏–µ")
                temp.append(await bot.send_message(item, "–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ! –ü–æ—Å–º–æ—Ç—Ä–∏:"))
                temp.append(await bot.send_video_note(item, video_note_file_id))
                temp.append(await bot.send_message(item, "–ò–º—è: " + data["name"] + "\n–¶–µ–ª—å: " + data["target"] + "\n–û—Ç–∫—É–¥–∞: " + ','.join(str(await get_place("073e8a55524f48048a75d1ba0dc83bd6", data["latitude"], data["longitude"])).split(',')[-4:-1]) + "\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç–µ–±—è: " + str(round(geopy.distance.geodesic((data["latitude"], data["longitude"]), (changed_row[10], changed_row[11])).km, 1)) + " –∫–º", reply_markup=like_btn(["–Ω—Ä–∞–≤–∏—Ç—Å—è ‚ù§Ô∏è", "—Å–ª–µ–¥—É—é—â–∏–π üëé"])))
                await insert_new_msgs_to_db(item, temp, await db.read_table(), db)





        # await bot.send_chat_action(message.from_user.id, action="typing")
        await sleep(2)
        for msg in msgs:
            try:
                await msg.delete()
            except:
                print("!!!")

        msgs=[]


        msgs.append(await message.answer("–ò—â—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞...\n"))
        await bot.send_chat_action(message.from_user.id, action="typing")
        await sleep(2)

    ###–ø—Ä–∏–∫–æ–ª—Ö–æ–∑–∏–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–µ—Ä–≤–æ–≥–æ –∫—Ä—É–∂–∫–∞
        df = await db.read_table()
        contr_person = await closest_person(message.from_user.id, df)
        changed_row = df[df['user_id'] == message.from_user.id].iloc[0].values.flatten().tolist()[1:]
        if isinstance(contr_person, int):
            changed_row[0] = str(changed_row[0])
            changed_row[5] = str(1)
            changed_row[6] = str(changed_row[6])
            await db.insert(changed_row)
            msgs.append(await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å"))
        else:
            changed_opponent_row = df[df['user_id'] == int(contr_person['user_id'])].iloc[0].values.flatten().tolist()[1:]
            msgs.append(await message.answer_video_note(
            contr_person["circle"],
            ))
            msgs.append(await message.answer("–ò–º—è: " + contr_person["name"] + "\n–¶–µ–ª—å: " + contr_person["target"] + "\n–û—Ç–∫—É–¥–∞: " + ','.join(str(await get_place("073e8a55524f48048a75d1ba0dc83bd6", contr_person["latitude"], contr_person["longitude"])).split(',')[-4:-1]) + "\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç–µ–±—è: " + str(round(geopy.distance.geodesic((data["latitude"], data["longitude"]), (contr_person[10], contr_person[11])).km, 1)) + " –∫–º", reply_markup=like_btn(["–Ω—Ä–∞–≤–∏—Ç—Å—è ‚ù§Ô∏è", "—Å–ª–µ–¥—É—é—â–∏–π üëé"])))
            if changed_row[3]==None:
                changed_row[3] = str(contr_person['user_id'])
            else:
                changed_row[3] = str(changed_row[3])+ ' ' + str(contr_person['user_id'])

            changed_row[0] = str(changed_row[0])
            changed_row[5] = str(changed_row[5])
            changed_row[6] = str(changed_row[6])
            await db.insert(changed_row)

            if changed_opponent_row[4]==None:
                changed_opponent_row[4] = str(message.from_user.id)
            else:
                changed_opponent_row[4] = str(changed_opponent_row[4])+ ' ' + str(message.from_user.id)

            changed_opponent_row[0] = str(changed_opponent_row[0])
            changed_opponent_row[5] = str(changed_opponent_row[5])
            changed_opponent_row[6] = str(changed_opponent_row[6])

            await db.insert(changed_opponent_row)
        await insert_new_msgs_to_db(message.from_user.id, msgs, await db.read_table(), db)
    else:
        msgs = []
        msgs.append(await message.answer("üòë –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π –∫—Ä—É–∂–æ—á–µ–∫, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –ø–æ–¥–æ–π–¥–µ—Ç\n–ü—Ä–∏—à–ª–∏ –¥—Ä—É–≥–æ–π"))
        await insert_new_msgs_to_db(message.from_user.id, msgs, await db.read_table(), db)





@router.message(Form.circle, ~F.video_note)
async def form_photo(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –∫—Ä—É–∂–æ–∫!")
